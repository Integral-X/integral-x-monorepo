name: Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_EBAY: ${{ github.repository }}/ebay-service
  IMAGE_NAME_GATEWAY: ${{ github.repository }}/api-gateway

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      ebay-image: ${{ steps.meta-ebay.outputs.tags }}
      gateway-image: ${{ steps.meta-gateway.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for eBay Service
        id: meta-ebay
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_EBAY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Extract metadata for API Gateway
        id: meta-gateway
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_GATEWAY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push eBay Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ebay-service
          push: true
          tags: ${{ steps.meta-ebay.outputs.tags }}
          labels: ${{ steps.meta-ebay.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push API Gateway
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.api-gateway
          push: true
          tags: ${{ steps.meta-gateway.outputs.tags }}
          labels: ${{ steps.meta-gateway.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment"
          echo "eBay Service Image: ${{ needs.build-and-push.outputs.ebay-image }}"
          echo "API Gateway Image: ${{ needs.build-and-push.outputs.gateway-image }}"
          # Add your staging deployment commands here
          # Example: kubectl set image deployment/ebay-service ebay-service=${{ needs.build-and-push.outputs.ebay-image }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment"
          echo "eBay Service Image: ${{ needs.build-and-push.outputs.ebay-image }}"
          echo "API Gateway Image: ${{ needs.build-and-push.outputs.gateway-image }}"
          # Add your production deployment commands here
          # Example: kubectl set image deployment/ebay-service ebay-service=${{ needs.build-and-push.outputs.ebay-image }}

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "âœ… Staging deployment successful"
          fi
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "âœ… Production deployment successful"
          fi
          # Add notification logic here (Slack, Teams, etc.)