name: Main Checks

on:
  push:
    branches: [main]

jobs:
  main-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Check code formatting
        run: yarn spotless --check
      
      - name: Lint all projects
        run: npx nx run-many --target=lint --all
      
      - name: Test all projects (includes validation tests)
        run: npx nx run-many --target=test --all
      
      - name: Build all projects
        run: npx nx run-many --target=build --all
      
      - name: Generate test coverage report
        if: matrix.node-version == '20.x'
        run: |
          echo "## Test Coverage Report" > coverage-report.md
          echo "Coverage reports generated for all projects" >> coverage-report.md
          find . -name "lcov.info" -type f | head -5 >> coverage-report.md
      
      - name: Upload test coverage artifacts
        uses: actions/upload-artifact@v3
        if: matrix.node-version == '20.x'
        with:
          name: coverage-reports
          path: |
            coverage-report.md
            **/coverage/lcov.info

  docker-build:
    runs-on: ubuntu-latest
    needs: main-checks
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build eBay Service Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ebay-service
          push: false
          tags: ebay-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build API Gateway Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.api-gateway
          push: false
          tags: api-gateway:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: main-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
