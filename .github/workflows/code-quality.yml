name: Code Quality & Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 6 * * 1" # Run weekly on Mondays at 6 AM UTC

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint with detailed reporting
        run: |
          echo "## ESLint Code Quality Report" > eslint-report.md
          npx eslint . --ext .ts --format json --output-file eslint-report.json || true
          npx eslint . --ext .ts --format stylish
          echo "ESLint report saved to eslint-report.json" >> eslint-report.md

      - name: Generate code metrics report
        run: |
          echo "## Code Metrics Report" > code-metrics-report.md
          echo "### File Count Analysis" >> code-metrics-report.md
          echo "TypeScript files: $(find apps libs -name "*.ts" -not -path "*/node_modules/*" | wc -l)" >> code-metrics-report.md
          echo "Test files: $(find apps libs -name "*.spec.ts" -o -name "*.test.ts" | wc -l)" >> code-metrics-report.md
          echo "### Line Count Analysis" >> code-metrics-report.md
          find apps libs -name "*.ts" -not -path "*/node_modules/*" -exec wc -l {} + | tail -1 >> code-metrics-report.md
          echo "Code metrics analysis completed" >> code-metrics-report.md

      - name: Run TypeScript compiler checks
        run: |
          echo "## TypeScript Compiler Checks" > typescript-report.md
          echo "Running TypeScript compilation check..." >> typescript-report.md
          if npx tsc --noEmit --project tsconfig.base.json 2>&1 | tee typescript-errors.log; then
            echo "✅ No TypeScript compilation errors found" >> typescript-report.md
          else
            echo "⚠️ TypeScript compilation issues found - see typescript-errors.log" >> typescript-report.md
          fi
          echo "TypeScript compilation check completed" >> typescript-report.md

      - name: Run CodeQL Analysis (Free GitHub Security)
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            eslint-report.json
            eslint-report.md
            code-metrics-report.md
            typescript-report.md
            typescript-errors.log

  dependency-security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run npm audit
        run: |
          echo "## NPM Audit Results" > audit-report.md
          npm audit --audit-level=moderate --json > audit-results.json || true

          if [ -s audit-results.json ]; then
            echo "### Vulnerabilities Found" >> audit-report.md
            cat audit-results.json >> audit-report.md
          else
            echo "### ✅ No vulnerabilities found" >> audit-report.md
          fi

      - name: Run yarn audit for additional security checks
        run: |
          echo "## Yarn Audit Results" > yarn-audit-report.md
          yarn audit --json > yarn-audit-results.json || true
          echo "Yarn audit completed" >> yarn-audit-report.md

      - name: Check for known security patterns
        run: |
          echo "## Security Pattern Analysis" > security-patterns-report.md
          # Check for common security anti-patterns
          echo "Checking for potential security issues..." >> security-patterns-report.md

          # Check for hardcoded secrets (basic patterns)
          if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.js" apps/ libs/ | grep -v "\.spec\." | grep -v "\.test\." | head -10; then
            echo "⚠️ Potential hardcoded secrets found - please review" >> security-patterns-report.md
          else
            echo "✅ No obvious hardcoded secrets detected" >> security-patterns-report.md
          fi

          # Check for eval usage
          if grep -r "eval(" --include="*.ts" --include="*.js" apps/ libs/; then
            echo "⚠️ eval() usage detected - security risk" >> security-patterns-report.md
          else
            echo "✅ No eval() usage detected" >> security-patterns-report.md
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            audit-results.json
            audit-report.md
            yarn-audit-results.json
            yarn-audit-report.md
            security-patterns-report.md

  docker-security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -f Dockerfile.ebay-service -t ebay-service:security-scan .
          docker build -f Dockerfile.api-gateway -t api-gateway:security-scan .

      - name: Run Trivy vulnerability scanner on eBay Service
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ebay-service:security-scan"
          format: "sarif"
          output: "trivy-ebay-service.sarif"

      - name: Run Trivy vulnerability scanner on API Gateway
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "api-gateway:security-scan"
          format: "sarif"
          output: "trivy-api-gateway.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            trivy-ebay-service.sarif
            trivy-api-gateway.sarif

  license-compliance:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check license compliance
        run: |
          npx license-checker --summary > license-summary.txt
          npx license-checker --json > license-details.json

          echo "## License Compliance Report" > license-report.md
          echo "" >> license-report.md
          echo "### Summary" >> license-report.md
          cat license-summary.txt >> license-report.md
          echo "" >> license-report.md
          echo "### Details" >> license-report.md
          echo "Full license details saved to license-details.json" >> license-report.md

      - name: Upload license compliance results
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance
          path: |
            license-summary.txt
            license-details.json
            license-report.md
