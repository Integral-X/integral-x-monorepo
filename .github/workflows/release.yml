name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Generate changelog
        id: changelog
        run: |
          # Install conventional-changelog-cli if not present
          yarn install -g conventional-changelog-cli
          
          # Generate changelog
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          
          # Get the latest changes for release notes
          LATEST_CHANGES=$(conventional-changelog -p angular -r 1)
          echo "LATEST_CHANGES<<EOF" >> $GITHUB_OUTPUT
          echo "$LATEST_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Determine version bump
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Determine version bump type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BUMP_TYPE="${{ github.event.inputs.release-type }}"
          else
            # Auto-determine based on commit messages
            if git log --format=%B -n 20 | grep -q "BREAKING CHANGE\|feat!"; then
              BUMP_TYPE="major"
            elif git log --format=%B -n 20 | grep -q "^feat"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          
          # Calculate new version
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version --preid=rc | sed 's/v//')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Reset package.json changes
          git checkout package.json
      
      - name: Update version in all packages
        run: |
          # Update root package.json
          yarn version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          
          # Update app package.json files
          cd apps/api-gateway && yarn version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          cd ../ebay-service && yarn version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          
          # Update lib package.json files
          cd ../../libs/auth && yarn version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          cd ../messaging && yarn version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          cd ../observability && yarn version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          cd ../common && yarn version ${{ steps.version.outputs.new_version }} --no-git-tag-version
      
      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
      
      - name: Push changes
        run: |
          git push origin main
          git push origin "v${{ steps.version.outputs.new_version }}"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## Changes in v${{ steps.version.outputs.new_version }}
            
            ${{ steps.changelog.outputs.LATEST_CHANGES }}
            
            ## Docker Images
            
            - eBay Service: `ghcr.io/${{ github.repository }}/ebay-service:v${{ steps.version.outputs.new_version }}`
            - API Gateway: `ghcr.io/${{ github.repository }}/api-gateway:v${{ steps.version.outputs.new_version }}`
            
            ## Installation
            
            ```bash
            docker pull ghcr.io/${{ github.repository }}/ebay-service:v${{ steps.version.outputs.new_version }}
            docker pull ghcr.io/${{ github.repository }}/api-gateway:v${{ steps.version.outputs.new_version }}
            ```
          draft: false
          prerelease: false